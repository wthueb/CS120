create an ALU: ./ALU.circ

-----

convert to tinyproc2 machine code:
add r3, r1, r2
mul r2, r3, r1
ldi r2, 3

11 01 10 00
10 11 01 10
10 00 11 11

d8
b6
8f

-----

convert to tinyproc2 asm:
0f
4b
86
ff
ac

00 00 11 11
01 00 10 11
10 00 01 10
11 11 11 11
10 10 11 00

ldi r0, 3
ldi r1, 2
mul r2, r0, r1
ldi r3, 2s comp: -1 | signed magnitude: -7 | unsigned: 15
add r2, r2, r3

-----

what is the value of r2 after the last question?
r2 = 5

-----

how many bits do you need to select a register in mips (32 registers)?
log2(32) = 5

-----

how many bits do you need to select a register in arm (16 registers)?
log2(16) = 4

-----

convert mips asm to machine code:
addi R13, R14, 12

op rs rt immediate
001000 01111 01110 0000000000001100
0010 0001 1110 1110 0000 0000 0000 1100

21 ee 00 0c

-----

arm to hex:
ADD R5, R6, R7
1110 00 0 0100 0 Rn Rd 00000 0 0 Rm

1110 00 0 0100 0 0111 0110 00000 0 0 1000
1110 0000 1000 0111 0110 0000 0001 000 <- missing a bit? assuming that there is an extra 0 before Rm...

e0 87 60 08

-----

fill out a truth table for pictured finite state machine

T S  | S' A B C
0 00 | 01 0 0 1
1 00 | 10 1 0 1
0 01 | 10 1 0 0
1 01 | 00 1 1 0
0 10 | 00 0 1 0
1 10 | 01 0 1 1

-----

convert into two 16 bit steps:
li $s0, 0xAB32216

lui $s0, 0xAB32
ori $s0, 0x2216

-----

write asm for f1:

int f1()
{
    f2();
}

f1:
  jal f2
  addi $v0, $0, 0

-----

convert to mips:
if ($s0 > s1)
    $s0 = $s0 + 4

slt $t0, $s0, $s1
beq $t0, 1, end

addi $s0, $s0, 4

end:

-----

assume args are passed to the stack, write the asm. return in R0/$v0:
int sum(int a, int b)
{
    return a + b;
}

sum:
  lw $t0, -4($sp)
  lw $t1, ($sp)
  add $v0, $t0, $t1
  j $ra

-----

$s0 = {3, 4, 5, 6}

data[3] = data[0]

lw $t0, -12($s0)
sw $t0, ($s0)

-----

x = 4

x = 49

x = {3, 4, 10, 6}

x = 11
y = 33
